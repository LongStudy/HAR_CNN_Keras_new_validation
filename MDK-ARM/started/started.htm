<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [started\started.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image started\started.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Thu Oct  6 12:39:28 2022
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
aiPbCmdNNRun &rArr; aiPbMgrReceiveAiBuffer3 &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ea]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8a]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[166]">pb_check_proto3_default_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[166]">pb_check_proto3_default_value</a><BR>
 <LI><a href="#[162]">pb_field_set_to_default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[162]">pb_field_set_to_default</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8a]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32h7xx_it.o(.text.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9c]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32h7xx_it.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32h7xx_it.o(.text.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9f]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[bb]">_platform_observer_node_exec_cb</a> from ai_platform_interface.o(i._platform_observer_node_exec_cb) referenced from ai_platform_interface.o(i.ai_platform_observer_register_s)
 <LI><a href="#[b8]">_put_c_driver</a> from aitestutility.o(.text._put_c_driver) referenced 2 times from aitestutility.o(.text.lc_print)
 <LI><a href="#[a0]">aiOnExecNode_cb</a> from aivalidation.o(.text.aiOnExecNode_cb) referenced 2 times from aivalidation.o(.text.aiPbCmdNNRun)
 <LI><a href="#[a1]">aiPbBuffer_read_cb3</a> from aipbmgr.o(.text.aiPbBuffer_read_cb3) referenced 2 times from aipbmgr.o(.text.aiPbMgrReceiveAiBuffer3)
 <LI><a href="#[a2]">aiPbBuffer_write_cb3</a> from aipbmgr.o(.text.aiPbBuffer_write_cb3) referenced 2 times from aipbmgr.o(.text.aiPbMgrSendAiBuffer4)
 <LI><a href="#[7]">aiPbCmdNNInfo</a> from aivalidation.o(.text.aiPbCmdNNInfo) referenced 2 times from aivalidation.o(.data.pbCmdFuncTab)
 <LI><a href="#[8]">aiPbCmdNNRun</a> from aivalidation.o(.text.aiPbCmdNNRun) referenced 2 times from aivalidation.o(.data.pbCmdFuncTab)
 <LI><a href="#[5]">aiPbCmdSync</a> from aipbmgr.o(.text.aiPbCmdSync) referenced 2 times from aivalidation.o(.data.pbCmdFuncTab)
 <LI><a href="#[6]">aiPbCmdSysInfo</a> from aipbmgr.o(.text.aiPbCmdSysInfo) referenced 2 times from aivalidation.o(.data.pbCmdFuncTab)
 <LI><a href="#[bf]">ai_network_create</a> from network.o(.text.ai_network_create) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[bd]">ai_network_data_params_get</a> from network_data.o(.text.ai_network_data_params_get) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[c1]">ai_network_destroy</a> from network.o(.text.ai_network_destroy) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[c4]">ai_network_forward</a> from network.o(.text.ai_network_forward) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[c0]">ai_network_get_error</a> from network.o(.text.ai_network_get_error) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[be]">ai_network_get_report</a> from network.o(.text.ai_network_get_report) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[c2]">ai_network_init</a> from network.o(.text.ai_network_init) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[c3]">ai_network_run</a> from network.o(.text.ai_network_run) referenced from app_x-cube-ai.o(.rodata.networks)
 <LI><a href="#[a5]">buf_read</a> from pb_decode.o(.text.buf_read) referenced 2 times from pb_decode.o(.text.decode_field)
 <LI><a href="#[a5]">buf_read</a> from pb_decode.o(.text.buf_read) referenced 2 times from pb_decode.o(.text.pb_read)
 <LI><a href="#[a5]">buf_read</a> from pb_decode.o(.text.buf_read) referenced 4 times from pb_decode.o(.text.pb_skip_field)
 <LI><a href="#[0]">forward_conv2d</a> from layers_conv2d_generic_float.o(i.forward_conv2d) referenced 2 times from network.o(.data.conv1d_1_conv2d_layer)
 <LI><a href="#[0]">forward_conv2d</a> from layers_conv2d_generic_float.o(i.forward_conv2d) referenced 2 times from network.o(.data.conv1d_conv2d_layer)
 <LI><a href="#[2]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from network.o(.data.dense_1_dense_layer)
 <LI><a href="#[2]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from network.o(.data.dense_dense_layer)
 <LI><a href="#[4]">forward_relu</a> from layers_nl_generic_float.o(i.forward_relu) referenced 2 times from network.o(.data.dense_layer)
 <LI><a href="#[3]">forward_sm</a> from layers_nl_generic_float.o(i.forward_sm) referenced 2 times from network.o(.data.dense_1_layer)
 <LI><a href="#[bc]">func_dummy</a> from layers_conv2d_generic_float.o(i.func_dummy) referenced from layers_conv2d_generic_float.o(i.forward_conv2d)
 <LI><a href="#[1]">nl_func_relu_array_f32</a> from layers_nl_generic_float.o(i.nl_func_relu_array_f32) referenced 2 times from network.o(.data.conv1d_1_conv2d_layer)
 <LI><a href="#[1]">nl_func_relu_array_f32</a> from layers_nl_generic_float.o(i.nl_func_relu_array_f32) referenced 2 times from network.o(.data.conv1d_conv2d_layer)
 <LI><a href="#[a3]">nn_inputs_w_cb</a> from aipbmgr.o(.text.nn_inputs_w_cb) referenced 2 times from aipbmgr.o(.text.aiPbMgrSendNNInfo)
 <LI><a href="#[a4]">nn_outputs_w_cb</a> from aipbmgr.o(.text.nn_outputs_w_cb) referenced 2 times from aipbmgr.o(.text.aiPbMgrSendNNInfo)
 <LI><a href="#[ab]">pb_dec_bytes</a> from pb_decode.o(.text.pb_dec_bytes) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[a9]">pb_dec_fixed32</a> from pb_decode.o(.text.pb_dec_fixed32) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[aa]">pb_dec_fixed64</a> from pb_decode.o(.text.pb_dec_fixed64) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[ae]">pb_dec_fixed_length_bytes</a> from pb_decode.o(.text.pb_dec_fixed_length_bytes) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[ac]">pb_dec_string</a> from pb_decode.o(.text.pb_dec_string) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[ad]">pb_dec_submessage</a> from pb_decode.o(.text.pb_dec_submessage) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[a8]">pb_dec_svarint</a> from pb_decode.o(.text.pb_dec_svarint) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[a7]">pb_dec_uvarint</a> from pb_decode.o(.text.pb_dec_uvarint) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[a6]">pb_dec_varint</a> from pb_decode.o(.text.pb_dec_varint) referenced from pb_decode.o(.text.decode_field)
 <LI><a href="#[b4]">pb_enc_bytes</a> from pb_encode.o(.text.pb_enc_bytes) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b2]">pb_enc_fixed32</a> from pb_encode.o(.text.pb_enc_fixed32) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b3]">pb_enc_fixed64</a> from pb_encode.o(.text.pb_enc_fixed64) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b7]">pb_enc_fixed_length_bytes</a> from pb_encode.o(.text.pb_enc_fixed_length_bytes) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b5]">pb_enc_string</a> from pb_encode.o(.text.pb_enc_string) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b6]">pb_enc_submessage</a> from pb_encode.o(.text.pb_enc_submessage) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b1]">pb_enc_svarint</a> from pb_encode.o(.text.pb_enc_svarint) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b0]">pb_enc_uvarint</a> from pb_encode.o(.text.pb_enc_uvarint) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[af]">pb_enc_varint</a> from pb_encode.o(.text.pb_enc_varint) referenced from pb_encode.o(.text.encode_field)
 <LI><a href="#[b9]">read_callback</a> from aipbio.o(.text.read_callback) referenced 2 times from aipbio.o(.text.pb_io_istream)
 <LI><a href="#[ba]">write_callback</a> from aipbio.o(.text.write_callback) referenced 2 times from aipbio.o(.text.pb_io_ostream)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1aa]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ab]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ac]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cf]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1c5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[cc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ce]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_X_CUBE_AI_Init &rArr; aiValidationInit &rArr; systemSettingLog &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d7]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[da]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_number
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToTime
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ce]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[128]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_find
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
</UL>

<P><STRONG><a name="[129]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_find
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
</UL>

<P><STRONG><a name="[db]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1cf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_number
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
</UL>

<P><STRONG><a name="[1d3]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1d9]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[cb]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[e3]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1dd]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1de]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1df]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1e0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1e2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d2]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e8]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e7]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[ec]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[ed]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[f0]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h7xx_hal_crc_ex.o(.text.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_CRC_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, crc.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[10c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[137]"></a>HAL_GetDEVID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetDEVID))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[172]"></a>HAL_GetHalVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetHalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
</UL>

<P><STRONG><a name="[104]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>HAL_InitTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11a]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3172 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fc]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1306 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[113]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 216 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UART_Receive</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawReadBuffer
</UL>

<P><STRONG><a name="[10e]"></a>HAL_UART_Transmit</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_put_c_driver
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawWriteBuffer
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>MX_CRC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, crc.o(.text.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>MX_GPIO_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[114]"></a>MX_X_CUBE_AI_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_x-cube-ai.o(.text.MX_X_CUBE_AI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = MX_X_CUBE_AI_Init &rArr; aiValidationInit &rArr; systemSettingLog &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>MX_X_CUBE_AI_Process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_x-cube-ai.o(.text.MX_X_CUBE_AI_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MX_X_CUBE_AI_Process &rArr; aiValidationProcess &rArr; aiPrintNetworkInfo &rArr; aiPrintBufferInfo &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>SystemClock_Config</STRONG> (Thumb, 316 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>SystemInit</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[107]"></a>UART_SetConfig</STRONG> (Thumb, 1196 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[109]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>aiLogErr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aitesthelper.o(.text.aiLogErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aiLogErr &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[12c]"></a>aiPbAiBufferSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aipbmgr.o(.text.aiPbAiBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[7]"></a>aiPbCmdNNInfo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, aivalidation.o(.text.aiPbCmdNNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = aiPbCmdNNInfo &rArr; aiPbMgrSendNNInfo &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data.pbCmdFuncTab)
</UL>
<P><STRONG><a name="[8]"></a>aiPbCmdNNRun</STRONG> (Thumb, 1580 bytes, Stack size 192 bytes, aivalidation.o(.text.aiPbCmdNNRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = aiPbCmdNNRun &rArr; aiPbMgrReceiveAiBuffer3 &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_unregister_s
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_run
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_register_s
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_private_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbAiBufferSize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data.pbCmdFuncTab)
</UL>
<P><STRONG><a name="[5]"></a>aiPbCmdSync</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, aipbmgr.o(.text.aiPbCmdSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aiPbCmdSync &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data.pbCmdFuncTab)
</UL>
<P><STRONG><a name="[6]"></a>aiPbCmdSysInfo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aipbmgr.o(.text.aiPbCmdSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aiPbCmdSysInfo &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashCacheConf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDEVID
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data.pbCmdFuncTab)
</UL>
<P><STRONG><a name="[139]"></a>aiPbMgrInit</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, aipbmgr.o(.text.aiPbMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = aiPbMgrInit &rArr; pb_io_stream_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_stream_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_istream
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_ostream
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[12d]"></a>aiPbMgrReceiveAiBuffer3</STRONG> (Thumb, 212 bytes, Stack size 104 bytes, aipbmgr.o(.text.aiPbMgrReceiveAiBuffer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = aiPbMgrReceiveAiBuffer3 &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_istream
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[12b]"></a>aiPbMgrSendAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, aipbmgr.o(.text.aiPbMgrSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aiPbMgrSendAck &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
</UL>

<P><STRONG><a name="[122]"></a>aiPbMgrSendAiBuffer4</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, aipbmgr.o(.text.aiPbMgrSendAiBuffer4))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = aiPbMgrSendAiBuffer4 &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_istream
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[12a]"></a>aiPbMgrSendNNInfo</STRONG> (Thumb, 868 bytes, Stack size 48 bytes, aipbmgr.o(.text.aiPbMgrSendNNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = aiPbMgrSendNNInfo &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
</UL>

<P><STRONG><a name="[131]"></a>aiPbMgrSendResp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aipbmgr.o(.text.aiPbMgrSendResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[132]"></a>aiPbMgrWaitAck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, aipbmgr.o(.text.aiPbMgrWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_istream
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[140]"></a>aiPbMgrWaitAndProcess</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, aipbmgr.o(.text.aiPbMgrWaitAndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = aiPbMgrWaitAndProcess &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_istream
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[141]"></a>aiPlatformVersion</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aitesthelper.o(.text.aiPlatformVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aiPlatformVersion &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[143]"></a>aiPrintBufferInfo</STRONG> (Thumb, 800 bytes, Stack size 24 bytes, aitesthelper.o(.text.aiPrintBufferInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aiPrintBufferInfo &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_byte_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
</UL>

<P><STRONG><a name="[144]"></a>aiPrintNetworkInfo</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, aitesthelper.o(.text.aiPrintNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = aiPrintNetworkInfo &rArr; aiPrintBufferInfo &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintBufferInfo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[115]"></a>aiValidationInit</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, aivalidation.o(.text.aiValidationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = aiValidationInit &rArr; systemSettingLog &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToTime
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcIpInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[117]"></a>aiValidationProcess</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, aivalidation.o(.text.aiValidationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = aiValidationProcess &rArr; aiPrintNetworkInfo &rArr; aiPrintBufferInfo &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_destroy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_report
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_find
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPlatformVersion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[149]"></a>ai_mnetwork_create</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_x-cube-ai.o(.text.ai_mnetwork_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ai_mnetwork_create &rArr; ai_network_create &rArr; ai_platform_network_create &rArr; ai_platform_interface_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[14c]"></a>ai_mnetwork_destroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_x-cube-ai.o(.text.ai_mnetwork_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_mnetwork_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[148]"></a>ai_mnetwork_find</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_x-cube-ai.o(.text.ai_mnetwork_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_mnetwork_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[134]"></a>ai_mnetwork_get_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_x-cube-ai.o(.text.ai_mnetwork_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[12e]"></a>ai_mnetwork_get_private_handle</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_x-cube-ai.o(.text.ai_mnetwork_get_private_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_mnetwork_get_private_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[14a]"></a>ai_mnetwork_get_report</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_x-cube-ai.o(.text.ai_mnetwork_get_report))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[14b]"></a>ai_mnetwork_init</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, app_x-cube-ai.o(.text.ai_mnetwork_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ai_mnetwork_init &rArr; ai_buffer_array_item_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[130]"></a>ai_mnetwork_run</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_x-cube-ai.o(.text.ai_mnetwork_run))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[bf]"></a>ai_network_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, network.o(.text.ai_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ai_network_create &rArr; ai_platform_network_create &rArr; ai_platform_interface_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[bd]"></a>ai_network_data_params_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, network_data.o(.text.ai_network_data_params_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_network_data_params_get &rArr; ai_platform_bind_network_params
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[c1]"></a>ai_network_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(.text.ai_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_network_destroy &rArr; ai_platform_network_destroy &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[c4]"></a>ai_network_forward</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network.o(.text.ai_network_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_network_forward &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[c0]"></a>ai_network_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(.text.ai_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_network_get_error &rArr; ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[be]"></a>ai_network_get_report</STRONG> (Thumb, 182 bytes, Stack size 144 bytes, network.o(.text.ai_network_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ai_network_get_report &rArr; ai_platform_api_get_network_report &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_revision
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[c2]"></a>ai_network_init</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, network.o(.text.ai_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ai_network_init &rArr; ai_platform_network_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[c3]"></a>ai_network_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(.text.ai_network_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.rodata.networks)
</UL>
<P><STRONG><a name="[146]"></a>crcIpInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, aitestutility.o(.text.crcIpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crcIpInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[121]"></a>dwtCyclesToFloatMs</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, aitestutility.o(.text.dwtCyclesToFloatMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dwtCyclesToFloatMs
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[147]"></a>dwtCyclesToTime</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, aitestutility.o(.text.dwtCyclesToTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwtCyclesToTime &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[138]"></a>getFlashCacheConf</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, aitestutility.o(.text.getFlashCacheConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getFlashCacheConf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[171]"></a>ioRawDisableLLWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aitestutility.o(.text.ioRawDisableLLWrite))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_stream_init
</UL>

<P><STRONG><a name="[168]"></a>ioRawReadBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aitestutility.o(.text.ioRawReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ioRawReadBuffer &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
</UL>

<P><STRONG><a name="[169]"></a>ioRawWriteBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aitestutility.o(.text.ioRawWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ioRawWriteBuffer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_io_flush_ostream
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_callback
</UL>

<P><STRONG><a name="[11f]"></a>lc_print</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aitestutility.o(.text.lc_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintBufferInfo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPlatformVersion
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemSettingLog
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
</UL>

<P><STRONG><a name="[d1]"></a>main</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_X_CUBE_AI_Init &rArr; aiValidationInit &rArr; systemSettingLog &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13d]"></a>pb_decode_delimited</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, pb_decode.o(.text.pb_decode_delimited))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
</UL>

<P><STRONG><a name="[16e]"></a>pb_decode_noinit</STRONG> (Thumb, 598 bytes, Stack size 112 bytes, pb_decode.o(.text.pb_decode_noinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_find
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
</UL>

<P><STRONG><a name="[16f]"></a>pb_decode_varint</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, pb_decode.o(.text.pb_decode_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_decode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_svarint
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_uvarint
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_varint
</UL>

<P><STRONG><a name="[135]"></a>pb_encode</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, pb_encode.o(.text.pb_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_field
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSync
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
</UL>

<P><STRONG><a name="[127]"></a>pb_encode_string</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pb_encode.o(.text.pb_encode_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_encode_string &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
</UL>

<P><STRONG><a name="[16d]"></a>pb_encode_submessage</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, pb_encode.o(.text.pb_encode_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_submessage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>

<P><STRONG><a name="[126]"></a>pb_encode_tag_for_field</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, pb_encode.o(.text.pb_encode_tag_for_field))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
</UL>

<P><STRONG><a name="[167]"></a>pb_encode_varint</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, pb_encode.o(.text.pb_encode_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_encode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_fixed_length_bytes
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_string
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_bytes
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_svarint
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_uvarint
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_varint
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_field
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
</UL>

<P><STRONG><a name="[161]"></a>pb_field_iter_begin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pb_common.o(.text.pb_field_iter_begin))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
</UL>

<P><STRONG><a name="[170]"></a>pb_field_iter_find</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pb_common.o(.text.pb_field_iter_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_field_iter_find
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
</UL>

<P><STRONG><a name="[163]"></a>pb_field_iter_next</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, pb_common.o(.text.pb_field_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_field_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
</UL>

<P><STRONG><a name="[13e]"></a>pb_io_flush_istream</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aipbio.o(.text.pb_io_flush_istream))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
</UL>

<P><STRONG><a name="[136]"></a>pb_io_flush_ostream</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aipbio.o(.text.pb_io_flush_ostream))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pb_io_flush_ostream &rArr; ioRawWriteBuffer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSync
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
</UL>

<P><STRONG><a name="[13b]"></a>pb_io_istream</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aipbio.o(.text.pb_io_istream))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>

<P><STRONG><a name="[13c]"></a>pb_io_ostream</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aipbio.o(.text.pb_io_ostream))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>

<P><STRONG><a name="[13a]"></a>pb_io_stream_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aipbio.o(.text.pb_io_stream_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_io_stream_init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawDisableLLWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>

<P><STRONG><a name="[125]"></a>pb_read</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, pb_decode.o(.text.pb_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_string
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_read_cb3
</UL>

<P><STRONG><a name="[15f]"></a>pb_skip_field</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, pb_decode.o(.text.pb_skip_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_skip_field &rArr; pb_decode_varint32_eof
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
</UL>

<P><STRONG><a name="[145]"></a>systemSettingLog</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, aitestutility.o(.text.systemSettingLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = systemSettingLog &rArr; lc_print &rArr; vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDEVID
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[16a]"></a>vlc_print</STRONG> (Thumb, 1240 bytes, Stack size 216 bytes, lc_print.o(.text.vlc_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vlc_print &rArr; _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_number
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc_print
</UL>

<P><STRONG><a name="[17c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[178]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>

<P><STRONG><a name="[1e6]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[17a]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[17b]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[175]"></a>_ai_platform_acquire_crc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ai_platform_interface.o(i._ai_platform_acquire_crc))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Is_Enabled
</UL>

<P><STRONG><a name="[176]"></a>_ai_platform_release_crc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai_platform_interface.o(i._ai_platform_release_crc))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Is_Enabled
</UL>

<P><STRONG><a name="[19b]"></a>ai_array_get_byte_size</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
</UL>

<P><STRONG><a name="[183]"></a>ai_array_get_data_byte_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_data_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[17e]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[14d]"></a>ai_buffer_array_item_set_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ai_platform.o(i.ai_buffer_array_item_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_buffer_array_item_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_init
</UL>

<P><STRONG><a name="[181]"></a>ai_buffer_array_sane</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ai_platform.o(i.ai_buffer_array_sane))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
</UL>

<P><STRONG><a name="[124]"></a>ai_buffer_get_byte_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ai_platform.o(i.ai_buffer_get_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintBufferInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_read_cb3
</UL>

<P><STRONG><a name="[123]"></a>ai_buffer_get_size</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ai_platform.o(i.ai_buffer_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintBufferInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_read_cb3
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[188]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[19e]"></a>ai_dict_decompress_f32</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict_decompress_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict_decompress_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d
</UL>

<P><STRONG><a name="[195]"></a>ai_layers_destroy_all</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, layers.o(i.ai_layers_destroy_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_destroy_all
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
</UL>

<P><STRONG><a name="[18e]"></a>ai_layers_forward_all</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_forward_all &rArr; _ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[197]"></a>ai_layers_init_all</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, layers.o(i.ai_layers_init_all))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[198]"></a>ai_layers_post_init_all</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, layers.o(i.ai_layers_post_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[157]"></a>ai_platform_api_get_network_report</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, ai_platform_interface.o(i.ai_platform_api_get_network_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ai_platform_api_get_network_report &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_version_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_buffers_signature_valid
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
</UL>

<P><STRONG><a name="[155]"></a>ai_platform_api_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_api_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[14f]"></a>ai_platform_bind_network_params</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_bind_network_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_data_params_get
</UL>

<P><STRONG><a name="[153]"></a>ai_platform_context_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_unregister_s
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_register_s
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[15b]"></a>ai_platform_get_activations_map</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_activations_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[159]"></a>ai_platform_get_weights_map</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_weights_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[156]"></a>ai_platform_interface_api_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_interface_api_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_interface_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[14e]"></a>ai_platform_network_create</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ai_platform_network_create &rArr; ai_platform_interface_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_version_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Is_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
</UL>

<P><STRONG><a name="[150]"></a>ai_platform_network_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_network_destroy &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_destroy_all
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_destroy
</UL>

<P><STRONG><a name="[152]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>

<P><STRONG><a name="[158]"></a>ai_platform_network_init</STRONG> (Thumb, 256 bytes, Stack size 104 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ai_platform_network_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_init_all
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_buffers_signature_valid
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[15c]"></a>ai_platform_network_post_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ai_platform_network_post_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[151]"></a>ai_platform_network_process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_forward
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
</UL>

<P><STRONG><a name="[15a]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_unregister_s
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_observer_register_s
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[12f]"></a>ai_platform_observer_register_s</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_observer_register_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_observer_register_s &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[133]"></a>ai_platform_observer_unregister_s</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_observer_unregister_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_observer_unregister_s &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[154]"></a>ai_platform_runtime_get_revision</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_runtime_get_revision))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_runtime_get_revision &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
</UL>

<P><STRONG><a name="[142]"></a>ai_platform_runtime_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_runtime_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_runtime_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPlatformVersion
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_report
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[190]"></a>ai_platform_version_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.ai_platform_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[194]"></a>ai_version_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.ai_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[196]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[193]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[199]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[0]"></a>forward_conv2d</STRONG> (Thumb, 696 bytes, Stack size 216 bytes, layers_conv2d_generic_float.o(i.forward_conv2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = forward_conv2d &rArr; ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict_decompress_f32
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_stride
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data.conv1d_conv2d_layer)
<LI> network.o(.data.conv1d_1_conv2d_layer)
</UL>
<P><STRONG><a name="[2]"></a>forward_dense</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, layers_conv2d_generic_float.o(i.forward_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = forward_dense &rArr; _ai_dict4_dot_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_dict8_dot_array_f32
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_dict4_dot_array_f32
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ai_math_dot_array
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data.dense_dense_layer)
<LI> network.o(.data.dense_1_dense_layer)
</UL>
<P><STRONG><a name="[4]"></a>forward_relu</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.forward_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = forward_relu &rArr; nl_func_relu_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_array_f32
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_thresholded_array_f32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_generic_array_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data.dense_layer)
</UL>
<P><STRONG><a name="[3]"></a>forward_sm</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.forward_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = forward_sm &rArr; nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data.dense_1_layer)
</UL>
<P><STRONG><a name="[184]"></a>get_tensor_byte_size</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ai_datatypes_internal.o(i.get_tensor_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[120]"></a>get_tensor_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.get_tensor_size))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[1]"></a>nl_func_relu_array_f32</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.nl_func_relu_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nl_func_relu_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data.conv1d_conv2d_layer)
<LI> network.o(.data.conv1d_1_conv2d_layer)
</UL>
<P><STRONG><a name="[1a3]"></a>nl_func_relu_generic_array_f32</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, layers_nl_generic_float.o(i.nl_func_relu_generic_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nl_func_relu_generic_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[1a4]"></a>nl_func_relu_thresholded_array_f32</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.nl_func_relu_thresholded_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nl_func_relu_thresholded_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[1a5]"></a>nl_func_sm_array_f32</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, layers_nl_generic_float.o(i.nl_func_sm_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[1a6]"></a>nl_func_sm_channel_f32</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.nl_func_sm_channel_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nl_func_sm_channel_f32 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
</UL>

<P><STRONG><a name="[1a8]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
</UL>

<P><STRONG><a name="[1e7]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[1e9]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[c9]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ea]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1eb]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
</UL>

<P><STRONG><a name="[1a7]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>write_callback</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, aipbio.o(.text.write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_callback &rArr; ioRawWriteBuffer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawWriteBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbio.o(.text.pb_io_ostream)
</UL>
<P><STRONG><a name="[b9]"></a>read_callback</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, aipbio.o(.text.read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_callback &rArr; ioRawReadBuffer &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawReadBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioRawWriteBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbio.o(.text.pb_io_istream)
</UL>
<P><STRONG><a name="[a1]"></a>aiPbBuffer_read_cb3</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, aipbmgr.o(.text.aiPbBuffer_read_cb3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aiPbBuffer_read_cb3 &rArr; pb_read
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_byte_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(.text.aiPbMgrReceiveAiBuffer3)
</UL>
<P><STRONG><a name="[a2]"></a>aiPbBuffer_write_cb3</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, aipbmgr.o(.text.aiPbBuffer_write_cb3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aiPbBuffer_write_cb3 &rArr; pb_encode_string &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_byte_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(.text.aiPbMgrSendAiBuffer4)
</UL>
<P><STRONG><a name="[a3]"></a>nn_inputs_w_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aipbmgr.o(.text.nn_inputs_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nn_inputs_w_cb &rArr; nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(.text.aiPbMgrSendNNInfo)
</UL>
<P><STRONG><a name="[a4]"></a>nn_outputs_w_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aipbmgr.o(.text.nn_outputs_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nn_outputs_w_cb &rArr; nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(.text.aiPbMgrSendNNInfo)
</UL>
<P><STRONG><a name="[16c]"></a>nn_shape_w_cb</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, aipbmgr.o(.text.nn_shape_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_outputs_w_cb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_inputs_w_cb
</UL>

<P><STRONG><a name="[a0]"></a>aiOnExecNode_cb</STRONG> (Thumb, 576 bytes, Stack size 120 bytes, aivalidation.o(.text.aiOnExecNode_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = aiOnExecNode_cb &rArr; aiPbMgrSendAiBuffer4 &rArr; pb_decode_delimited &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_size
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.text.aiPbCmdNNRun)
</UL>
<P><STRONG><a name="[a5]"></a>buf_read</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, pb_decode.o(.text.buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = buf_read
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pb_decode.o(.text.pb_skip_field)
<LI> pb_decode.o(.text.pb_read)
<LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[15e]"></a>pb_decode_varint32_eof</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, pb_decode.o(.text.pb_decode_varint32_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_decode_varint32_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_string
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_bytes
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
</UL>

<P><STRONG><a name="[15d]"></a>decode_field</STRONG> (Thumb, 1168 bytes, Stack size 64 bytes, pb_decode.o(.text.decode_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
</UL>

<P><STRONG><a name="[162]"></a>pb_field_set_to_default</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, pb_decode.o(.text.pb_field_set_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
</UL>

<P><STRONG><a name="[a6]"></a>pb_dec_varint</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_varint &rArr; pb_decode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[a7]"></a>pb_dec_uvarint</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_uvarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_uvarint &rArr; pb_decode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[a8]"></a>pb_dec_svarint</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, pb_decode.o(.text.pb_dec_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_dec_svarint &rArr; pb_decode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[a9]"></a>pb_dec_fixed32</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_dec_fixed32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[aa]"></a>pb_dec_fixed64</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_dec_fixed64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[ab]"></a>pb_dec_bytes</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_bytes &rArr; pb_decode_varint32_eof
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[ac]"></a>pb_dec_string</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_string &rArr; pb_decode_varint32_eof
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[ad]"></a>pb_dec_submessage</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, pb_decode.o(.text.pb_dec_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = pb_dec_submessage &rArr; pb_decode_noinit &rArr; decode_field &rArr; pb_field_set_to_default &rArr;  pb_field_set_to_default (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[ae]"></a>pb_dec_fixed_length_bytes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pb_decode.o(.text.pb_dec_fixed_length_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pb_dec_fixed_length_bytes &rArr; pb_decode_varint32_eof
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.text.decode_field)
</UL>
<P><STRONG><a name="[165]"></a>encode_field</STRONG> (Thumb, 868 bytes, Stack size 64 bytes, pb_encode.o(.text.encode_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
</UL>

<P><STRONG><a name="[166]"></a>pb_check_proto3_default_value</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, pb_encode.o(.text.pb_check_proto3_default_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_field
</UL>

<P><STRONG><a name="[af]"></a>pb_enc_varint</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, pb_encode.o(.text.pb_enc_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_enc_varint &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b0]"></a>pb_enc_uvarint</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, pb_encode.o(.text.pb_enc_uvarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_enc_uvarint &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b1]"></a>pb_enc_svarint</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, pb_encode.o(.text.pb_enc_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_enc_svarint &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b2]"></a>pb_enc_fixed32</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pb_encode.o(.text.pb_enc_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_enc_fixed32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b3]"></a>pb_enc_fixed64</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pb_encode.o(.text.pb_enc_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_enc_fixed64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b4]"></a>pb_enc_bytes</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, pb_encode.o(.text.pb_enc_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_enc_bytes &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b5]"></a>pb_enc_string</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, pb_encode.o(.text.pb_enc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_enc_string &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b6]"></a>pb_enc_submessage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pb_encode.o(.text.pb_enc_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pb_enc_submessage &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b7]"></a>pb_enc_fixed_length_bytes</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pb_encode.o(.text.pb_enc_fixed_length_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_enc_fixed_length_bytes &rArr; pb_encode_varint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.text.encode_field)
</UL>
<P><STRONG><a name="[b8]"></a>_put_c_driver</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aitestutility.o(.text._put_c_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _put_c_driver &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aitestutility.o(.text.lc_print)
</UL>
<P><STRONG><a name="[11d]"></a>_write_number</STRONG> (Thumb, 418 bytes, Stack size 112 bytes, lc_print.o(.text._write_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _write_number &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlc_print
</UL>

<P><STRONG><a name="[fe]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ff]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[174]"></a>CRC_Is_Enabled</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ai_platform_interface.o(i.CRC_Is_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_Is_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_release_crc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_acquire_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[177]"></a>CRC_Lock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ai_platform_interface.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_release_crc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_acquire_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_revision
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>

<P><STRONG><a name="[17d]"></a>_ai_platform_get_io_buffers_info</STRONG> (Thumb, 204 bytes, Stack size 136 bytes, ai_platform_interface.o(i._ai_platform_get_io_buffers_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[17f]"></a>_platform_ai_buffer_array_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_ai_buffer_array_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[192]"></a>_platform_get_table_map_from_buffer</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>

<P><STRONG><a name="[180]"></a>_platform_get_table_map_from_buffer_array</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>

<P><STRONG><a name="[191]"></a>_platform_network_buffers_signature_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i._platform_network_buffers_signature_valid))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[182]"></a>_platform_network_io_bind</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_data_byte_size
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[185]"></a>_platform_network_state_setup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[186]"></a>_platform_network_state_update_input</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_input
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[187]"></a>_platform_network_state_update_output</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_output
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[bb]"></a>_platform_observer_node_exec_cb</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ai_platform_interface.o(i._platform_observer_node_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _platform_observer_node_exec_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ai_platform_interface.o(i.ai_platform_observer_register_s)
</UL>
<P><STRONG><a name="[1a1]"></a>__ai_math_dot_array</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.__ai_math_dot_array))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[19f]"></a>_ai_dict4_dot_array_f32</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, layers_conv2d_generic_float.o(i._ai_dict4_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ai_dict4_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[1a0]"></a>_ai_dict8_dot_array_f32</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i._ai_dict8_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ai_dict8_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[18c]"></a>ai_conv2d_kernel_depthwise_f32</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_depthwise_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ai_conv2d_kernel_depthwise_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[18d]"></a>ai_conv2d_kernel_group_f32</STRONG> (Thumb, 378 bytes, Stack size 68 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_group_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_conv2d_kernel_group_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[18b]"></a>ai_conv2d_kernel_simple_opt_f32</STRONG> (Thumb, 370 bytes, Stack size 68 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_simple_opt_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[18a]"></a>ai_conv2d_stripe_f32</STRONG> (Thumb, 616 bytes, Stack size 120 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_stripe_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_simple_opt_f32
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_group_f32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_depthwise_f32
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d
</UL>

<P><STRONG><a name="[19a]"></a>core_nl_get_params_byte_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_nl_get_params_byte_size &rArr; ai_array_get_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d
</UL>

<P><STRONG><a name="[19c]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d
</UL>

<P><STRONG><a name="[19d]"></a>core_nl_get_params_stride</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_stride))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d
</UL>

<P><STRONG><a name="[bc]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.func_dummy))
<BR>[Address Reference Count : 1]<UL><LI> layers_conv2d_generic_float.o(i.forward_conv2d)
</UL>
<P><STRONG><a name="[1a2]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[18f]"></a>_ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i._ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
